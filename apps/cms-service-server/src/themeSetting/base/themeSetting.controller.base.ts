/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ThemeSettingService } from "../themeSetting.service";
import { ThemeSettingCreateInput } from "./ThemeSettingCreateInput";
import { ThemeSetting } from "./ThemeSetting";
import { Post } from "../../post/base/Post";
import { ThemeSettingFindManyArgs } from "./ThemeSettingFindManyArgs";
import { ThemeSettingWhereUniqueInput } from "./ThemeSettingWhereUniqueInput";
import { ThemeSettingUpdateInput } from "./ThemeSettingUpdateInput";

export class ThemeSettingControllerBase {
  constructor(protected readonly service: ThemeSettingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ThemeSetting })
  async createThemeSetting(
    @common.Body() data: ThemeSettingCreateInput
  ): Promise<ThemeSetting> {
    return await this.service.createThemeSetting({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ThemeSetting] })
  @ApiNestedQuery(ThemeSettingFindManyArgs)
  async themeSettings(@common.Req() request: Request): Promise<ThemeSetting[]> {
    const args = plainToClass(ThemeSettingFindManyArgs, request.query);
    return this.service.themeSettings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ThemeSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async themeSetting(
    @common.Param() params: ThemeSettingWhereUniqueInput
  ): Promise<ThemeSetting | null> {
    const result = await this.service.themeSetting({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ThemeSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateThemeSetting(
    @common.Param() params: ThemeSettingWhereUniqueInput,
    @common.Body() data: ThemeSettingUpdateInput
  ): Promise<ThemeSetting | null> {
    try {
      return await this.service.updateThemeSetting({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ThemeSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteThemeSetting(
    @common.Param() params: ThemeSettingWhereUniqueInput
  ): Promise<ThemeSetting | null> {
    try {
      return await this.service.deleteThemeSetting({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
