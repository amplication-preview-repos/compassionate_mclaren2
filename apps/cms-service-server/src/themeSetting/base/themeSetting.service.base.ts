/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ThemeSetting as PrismaThemeSetting } from "@prisma/client";

export class ThemeSettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ThemeSettingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.themeSetting.count(args);
  }

  async themeSettings<T extends Prisma.ThemeSettingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeSettingFindManyArgs>
  ): Promise<PrismaThemeSetting[]> {
    return this.prisma.themeSetting.findMany<Prisma.ThemeSettingFindManyArgs>(
      args
    );
  }
  async themeSetting<T extends Prisma.ThemeSettingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeSettingFindUniqueArgs>
  ): Promise<PrismaThemeSetting | null> {
    return this.prisma.themeSetting.findUnique(args);
  }
  async createThemeSetting<T extends Prisma.ThemeSettingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeSettingCreateArgs>
  ): Promise<PrismaThemeSetting> {
    return this.prisma.themeSetting.create<T>(args);
  }
  async updateThemeSetting<T extends Prisma.ThemeSettingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeSettingUpdateArgs>
  ): Promise<PrismaThemeSetting> {
    return this.prisma.themeSetting.update<T>(args);
  }
  async deleteThemeSetting<T extends Prisma.ThemeSettingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThemeSettingDeleteArgs>
  ): Promise<PrismaThemeSetting> {
    return this.prisma.themeSetting.delete(args);
  }
}
